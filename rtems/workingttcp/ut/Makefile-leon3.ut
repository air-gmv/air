# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
#GTEST_DIR = ..  # @LLLG set as environment variable

# Where to find user code.
USER_DIR = ..
USER_DIR_UT = .

#SPARC_ROOT = /opt/rtems-4.12-2017.07.17/sparc-rtems4.12
SPARC_ROOT = /opt/rtems/5/sparc-rtems5

# The RTEMS_MAKEFILE_PATH is defined by the user for the specific CPU and BSP
#RTEMS_MAKEFILE_PATH=$(SPARC_ROOT)/gr712rc
RTEMS_MAKEFILE_PATH=$(SPARC_ROOT)/leon3
#RTEMS_EXTERNAL_LIBRARY_PATH=/opt/rtems/rtems-impr/edilib/library


# These includes should not be modified by the user.  
include $(RTEMS_MAKEFILE_PATH)/Makefile.inc 
include $(RTEMS_CUSTOM) 
include $(PROJECT_ROOT)/make/leaf.cfg

# Flags passed to the C++ compiler.
#CCFLAGS += -g -Wall -Wextra -pthread
CCFLAGS += -pthread
#CXXFLAGS += -g -Wall -Wextra -pthread
CXXFLAGS += -pthread
#CPU_CFLAGS = -mcpu=v8 -msoft-float # ??? XXX LLLG

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -DGTEST -isystem $(GTEST_DIR)/include

# built in libraries include files
#CPPFLAGS+= -B$(XKY_LIBS)/libprintf/
#CPPFLAGS+= -gdwarf-2 -I./ -B./
#-I../common/\
#-B../common/\
#
#-B$(XKY_LIBS)/libxky/

# include directories
# 
INCS += -I./ -I../ -I$(RTEMS_MAKEFILE_PATH)/lib/include/bsp/

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = ${ARCH}/ethgmv_unittest.exe

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

LOCAL_HEADERS = $(USER_DIR)/*.h 

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

rtems-ttcp_ut.o : $(USER_DIR_UT)/rtems-ttcp_ut.cc $(LOCAL_HEADERS)
	$(CXX) $(CPPFLAGS) $(INCS) $(CXXFLAGS) -c $(USER_DIR_UT)/rtems-ttcp_ut.cc

${ARCH}/ethgmv_unittest.exe : rtems-ttcp_ut.o gtest.a 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

######${ARCH}/ethgmv_unittest.exe : gtest_main.a rtems-ttcp_ut.o 
	######$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@

