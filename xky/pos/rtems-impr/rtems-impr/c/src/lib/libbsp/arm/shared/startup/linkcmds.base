/**
 * @file
 *
 * @ingroup bsp_linker
 *
 * @brief Linker command base file.
 */

/*
 * Copyright (c) 2008
 * Embedded Brains GmbH
 * Obere Lagerstr. 30
 * D-82178 Puchheim
 * Germany
 * rtems@embedded-brains.de
 *
 * The license and distribution terms for this file may be found in the file
 * LICENSE in this distribution or at http://www.rtems.com/license/LICENSE.
 */

OUTPUT_FORMAT ("elf32-littlearm", "elf32-bigarm", "elf32-littlearm")

OUTPUT_ARCH (arm)

ENTRY (start)

/*
 * BSP: Global symbols that may be defined externally
 */

bsp_stack_align = DEFINED (bsp_stack_align) ? bsp_stack_align : 4;

bsp_section_align = DEFINED (bsp_section_align) ? bsp_section_align : 32;

bsp_section_start_end_align = DEFINED (bsp_section_start_end_align) ? bsp_section_start_end_align : bsp_section_align;
bsp_section_vector_end_align = DEFINED (bsp_section_vector_end_align) ? bsp_section_vector_end_align : bsp_section_align;
bsp_section_text_end_align = DEFINED (bsp_section_text_end_align) ? bsp_section_text_end_align : bsp_section_align;
bsp_section_rodata_end_align = DEFINED (bsp_section_rodata_end_align) ? bsp_section_rodata_end_align : bsp_section_align;
bsp_section_data_end_align = DEFINED (bsp_section_data_end_align) ? bsp_section_data_end_align : bsp_section_align;
bsp_section_fast_end_align = DEFINED (bsp_section_fast_end_align) ? bsp_section_fast_end_align : bsp_section_align;
bsp_section_bss_end_align = DEFINED (bsp_section_bss_end_align) ? bsp_section_bss_end_align : bsp_section_align;

bsp_section_vbarrier_align = DEFINED (bsp_section_vbarrier_align) ? bsp_section_vbarrier_align : 1;
bsp_section_robarrier_align = DEFINED (bsp_section_robarrier_align) ? bsp_section_robarrier_align : 1;

bsp_stack_abt_size = DEFINED (bsp_stack_abt_size) ? bsp_stack_abt_size : 128;
bsp_stack_abt_size = ALIGN (bsp_stack_abt_size, bsp_stack_align);

bsp_stack_fiq_size = DEFINED (bsp_stack_fiq_size) ? bsp_stack_fiq_size : 128;
bsp_stack_fiq_size = ALIGN (bsp_stack_fiq_size, bsp_stack_align);

bsp_stack_irq_size = DEFINED (bsp_stack_irq_size) ? bsp_stack_irq_size : 512;
bsp_stack_irq_size = ALIGN (bsp_stack_irq_size, bsp_stack_align);

bsp_stack_svc_size = DEFINED (bsp_stack_svc_size) ? bsp_stack_svc_size : 512;
bsp_stack_svc_size = ALIGN (bsp_stack_svc_size, bsp_stack_align);

bsp_stack_und_size = DEFINED (bsp_stack_und_size) ? bsp_stack_und_size : 128;
bsp_stack_und_size = ALIGN (bsp_stack_und_size, bsp_stack_align);

SECTIONS {
	.start : {
		/*
		 * BSP: Begin of start section
		 */
		bsp_section_start_begin = .;

		/*
		 * BSP: System startup entry
		 */
		KEEP (*(.bsp_start))
		KEEP (*(.bsp_start_data))

		. = ALIGN (bsp_section_start_end_align);

		/*
		 * BSP: End of start section
		 */
		bsp_section_start_end = .;
	} > REGION_START AT > REGION_START

	bsp_section_start_size = bsp_section_start_end - bsp_section_start_begin;

	.vector : {
		/*
		 * BSP: Begin of vector section
		 */
		bsp_section_vector_begin = .;

		/*
		 * BSP: Reserve space for the the exception vector table and
		 * the pointers to the default exceptions handlers.
		 */
		. = . + 64;

		/*
		 * BSP: Reserve space for mode stacks
		 */

		. = ALIGN (bsp_stack_align);

		bsp_stack_abt_begin = .;
		. = . + bsp_stack_abt_size;
		bsp_stack_abt_end = .;

		bsp_stack_fiq_begin = .;
		. = . + bsp_stack_fiq_size;
		bsp_stack_fiq_end = .;

		bsp_stack_irq_begin = .;
		. = . + bsp_stack_irq_size;
		bsp_stack_irq_end = .;

		bsp_stack_svc_begin = .;
		. = . + bsp_stack_svc_size;
		bsp_stack_svc_end = .;

		bsp_stack_und_begin = .;
		. = . + bsp_stack_und_size;
		bsp_stack_und_end = .;

		/*
		 * BSP: Special vector data
		 */
		*(.bsp_vector)

		. = ALIGN (bsp_section_vector_end_align);

		/*
		 * BSP: End of vector section
		 */
		bsp_section_vector_end = .;
	} > REGION_VECTOR AT > REGION_VECTOR

	bsp_section_vector_size = bsp_section_vector_end - bsp_section_vector_begin;

	.vbarrier : {
		. = ALIGN (bsp_section_vbarrier_align);
        } > REGION_VECTOR

	.text : {
		/*
		 * BSP: Begin of text section
		 */
		bsp_section_text_begin = .;

		/*
		 * BSP: Moved into .text from .init
		 */
		KEEP (*(.init))

		*(.text .stub .text.* .gnu.linkonce.t.*)
		KEEP (*(.text.*personality*))
		/* .gnu.warning sections are handled specially by elf32.em.  */
		*(.gnu.warning)

		/*
		 * BSP: Magic ARM stuff
		 */
		*(.ARM.*)
		*(.glue_7)
		*(.glue_7t)
		*(.vfp11_veneer)
		
		/*
		 * BSP: Special FreeBSD sysctl sections
		 */
		. = ALIGN (16);
		__start_set_sysctl_set = .;
		*(set_sysctl_*);
		__stop_set_sysctl_set = ABSOLUTE(.);
		*(set_domain_*);
		*(set_pseudo_*);

		/*
		 * BSP: Moved into .text from .*
		 */
		*(.eh_frame_hdr)

		/*
		 * BSP: Required by cpukit/score/src/threadhandler.c
		 */
		PROVIDE (_fini = .);

		/*
		 * BSP: Moved into .text from .fini
		 */
		KEEP (*(.fini))

		. = ALIGN (bsp_section_text_end_align);

		/*
		 * BSP: End of text section
		 */
		bsp_section_text_end = .;
	} > REGION_TEXT AT > REGION_TEXT_LOAD

	bsp_section_text_size = bsp_section_text_end - bsp_section_text_begin;

	bsp_section_text_load_begin = LOADADDR (.text);

	.rodata : {
		/*
		 * BSP: Begin of rodata section
		 */
		bsp_section_rodata_begin = .;

		__start_set_modmetadata_set = .;
		*(set_modmetadata_set);
		__stop_set_modmetadata_set = .;

		/*
		 * BSP: Moved into .rodata from .*
		 */
		*(.rodata .rodata.* .gnu.linkonce.r.*)
		*(.rodata1)

		. = ALIGN (bsp_section_rodata_end_align);

		/*
		 * BSP: End of rodata section
		 */
		bsp_section_rodata_end = .;
	} > REGION_RODATA AT > REGION_RODATA_LOAD

	bsp_section_rodata_size = bsp_section_rodata_end - bsp_section_rodata_begin;

	bsp_section_rodata_load_begin = LOADADDR (.rodata);

	.robarrier : {
		. = ALIGN (bsp_section_robarrier_align);
        } > REGION_RODATA

	.data : {
		/*
		 * BSP: Begin of data section
		 */
		bsp_section_data_begin = .;

		/*
		 * BSP: Moved into .data from .ctors
		 */
		/* gcc uses crtbegin.o to find the start of
		   the constructors, so we make sure it is
		   first.  Because this is a wildcard, it
		   doesn't matter if the user does not
		   actually link against crtbegin.o; the
		   linker won't look for a file to match a
		   wildcard.  The wildcard also means that it
		   doesn't matter which directory crtbegin.o
		   is in.  */
		KEEP (*crtbegin.o(.ctors))
		KEEP (*crtbegin?.o(.ctors))
		/* We don't want to include the .ctor section from
		   the crtend.o file until after the sorted ctors.
		   The .ctor section from the crtend file contains the
		   end of ctors marker and it must be last */
		KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .ctors))
		KEEP (*(SORT(.ctors.*)))
		KEEP (*(.ctors))

		/*
		 * BSP: Moved into .data from .dtors
		 */
		KEEP (*crtbegin.o(.dtors))
		KEEP (*crtbegin?.o(.dtors))
		KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o ) .dtors))
		KEEP (*(SORT(.dtors.*)))
		KEEP (*(.dtors))

		/*
		 * BSP: Moved into .data from .*
		 */
		*(.data1)
		KEEP (*(.eh_frame))
		*(.gcc_except_table .gcc_except_table.*)
		KEEP (*(.jcr))

		*(.data .data.* .gnu.linkonce.d.*)
		KEEP (*(.gnu.linkonce.d.*personality*))
		SORT(CONSTRUCTORS)

		. = ALIGN (bsp_section_data_end_align);

		/*
		 * BSP: End of data section
		 */
		bsp_section_data_end = .;
	} > REGION_DATA AT > REGION_DATA_LOAD

	bsp_section_data_size = bsp_section_data_end - bsp_section_data_begin;

	bsp_section_data_load_begin = LOADADDR (.data);

	.fast : {
		bsp_section_fast_begin = .;

		*(.bsp_fast)

		. = ALIGN (bsp_section_fast_end_align);

		bsp_section_fast_end = .;
	} > REGION_FAST AT > REGION_FAST_LOAD

	bsp_section_fast_size = bsp_section_fast_end - bsp_section_fast_begin;

	bsp_section_fast_load_begin = LOADADDR (.fast);

	.bss : {
		/*
		 * BSP: Begin of bss section
		 */
		bsp_section_bss_begin = .;

		*(COMMON)
		*(.dynbss)
		*(.bss .bss.* .gnu.linkonce.b.*)

		. = ALIGN (bsp_section_bss_end_align);

		/*
		 * BSP: End of bss section
		 */
		bsp_section_bss_end = .;
	} > REGION_BSS AT > REGION_BSS

	bsp_section_bss_size = bsp_section_bss_end - bsp_section_bss_begin;

	.work : {
		/*
		 * BSP: Begin of work section.  The work section will occupy
		 * the remaining REGION_WORK region and contains the RTEMS work
		 * space and heap.
		 */
		bsp_section_work_begin = .;

		. += ORIGIN (REGION_WORK) + LENGTH (REGION_WORK) - ABSOLUTE (.);

		/*
		 * BSP: End of work section
		 */
		bsp_section_work_end = .;
	} > REGION_WORK AT > REGION_WORK

	bsp_section_work_size = bsp_section_work_end - bsp_section_work_begin;

	.stack : {
		/*
		 * BSP: Begin of stack section.  The stack section will occupy
		 * the remaining REGION_STACK region and may contain the task
		 * stacks.  Depending on the region distribution this section
		 * may be of zero size.
		 */
		bsp_section_stack_begin = .;

		. += ORIGIN (REGION_STACK) + LENGTH (REGION_STACK) - ABSOLUTE (.);

		/*
		 * BSP: End of stack section
		 */
		bsp_section_stack_end = .;
	} > REGION_STACK AT > REGION_STACK

	bsp_section_stack_size = bsp_section_stack_end - bsp_section_stack_begin;

	/*
	 * BSP: External symbols (FIXME)
	 */
	RamBase = ORIGIN (REGION_WORK);
	RamSize = LENGTH (REGION_WORK);
	WorkAreaBase = bsp_section_work_begin;
	HeapSize = 0;
	
	/* Stabs debugging sections.  */
	.stab          0 : { *(.stab) }
	.stabstr       0 : { *(.stabstr) }
	.stab.excl     0 : { *(.stab.excl) }
	.stab.exclstr  0 : { *(.stab.exclstr) }
	.stab.index    0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment       0 : { *(.comment) }
	/* DWARF debug sections.
	   Symbols in the DWARF debugging sections are relative to the beginning
	   of the section so we begin them at 0.  */
	/* DWARF 1 */
	.debug          0 : { *(.debug) }
	.line           0 : { *(.line) }
	/* GNU DWARF 1 extensions */
	.debug_srcinfo  0 : { *(.debug_srcinfo) }
	.debug_sfnames  0 : { *(.debug_sfnames) }
	/* DWARF 1.1 and DWARF 2 */
	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	/* DWARF 2 */
	.debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_line     0 : { *(.debug_line) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_str      0 : { *(.debug_str) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }
	/* SGI/MIPS DWARF 2 extensions */
	.debug_weaknames 0 : { *(.debug_weaknames) }
	.debug_funcnames 0 : { *(.debug_funcnames) }
	.debug_typenames 0 : { *(.debug_typenames) }
	.debug_varnames  0 : { *(.debug_varnames) }
	/* DWARF 3 */
	.debug_pubtypes 0 : { *(.debug_pubtypes) }
	.debug_ranges   0 : { *(.debug_ranges) }
	.gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }

	/DISCARD/ : {
		*(.note.GNU-stack) *(.gnu_debuglink)
	}

	/*
	 * BSP: Catch all unknown sections
	 */
	.nirvana : {
		*(*)
	} > NIRVANA
}
