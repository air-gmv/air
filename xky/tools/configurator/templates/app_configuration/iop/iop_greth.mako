<%
    # device functions
    device_functions = dict(
          reader_task='eth_reader',
          writer_task='eth_writer',

          header_prebuild='eth_prebuild_header',
          header_compare='eth_compare_header',
          header_copy='eth_copy_header')
%>\
<%namespace name="iop_template" file="/iop_templates.mako"/>\
/*
 * ============================================================================
 * This file was generated by the GMV's Configurator Tool and is part of an I/O
 * partition configuration. 
 * File Purpose:	IO Partition user configuration. Contains the configuration 
 * 					options for Ethernet's GRETH devices.
 * ============================================================================
 */
#include <iop.h>
#include <iop_greth.h>
#include <eth_support.h>

${iop_template.RemotePortList(iop_configuration)}\

${iop_template.IopBuffersStorage(device.setup.txd_count + device.setup.rxd_count)}\

/**
 * @brief TX descriptor to IOP buffer mapping
 */
static iop_buffer_t *tx_iop_buffer[${device.setup.txd_count}];
/**
 * @brief RX descriptor to IOP buffer mapping
 */
static iop_buffer_t *rx_iop_buffer[${device.setup.rxd_count}];

/**
 * @brief RX and TX descriptor table
 * @warning this should be 2048, but we need 3072 to ensure the 0x400 alignment
 */
static uint8_t descriptor_table[3072];

/** @brief  GRETH control structure*/
static greth_softc_t greth_driver = ${'\\'}
{
    .iop_buffers            = iop_buffers,
    .iop_buffers_storage    = iop_buffers_storage,

    /** @note descriptor table address are split and aligned at the runtime */
    .txdesc = descriptor_table,
    .rxdesc = descriptor_table,

    .tx_iop_buffer = tx_iop_buffer,
    .rx_iop_buffer = rx_iop_buffer
};

/** @brief GRETH driver configuration */
static iop_eth_device_t device_configuration = ${'\\'}
{
    /* device configuration */
    .dev        = {

        .driver         = (void *)&greth_driver,
        .init           = greth_initialize,
        .open           = greth_open,
        .read           = greth_read,
        .write          = greth_write,
        .close          = greth_close,
    },

    /* ethernet configuration */
    .ip         = { ${', '.join(device.setup.ip)} },
    .mac        = { ${', '.join(['0x{0}'.format(o) for o in device.setup.mac])} },
    .rx_count   = ${device.setup.rxd_count},
    .tx_count   = ${device.setup.txd_count}
};

${iop_template.PhysicalDevice(iop_configuration, device, device_functions)}\
