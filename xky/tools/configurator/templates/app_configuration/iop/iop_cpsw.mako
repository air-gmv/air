<%
    # device functions
    device_functions = dict(
          reader_task='eth_reader',
          writer_task='eth_writer',
		  
          header_prebuild='eth_prebuild_header',
          header_compare='eth_compare_header',
          header_copy='eth_copy_header')
%>\
<%namespace name="iop_template" file="/iop_templates.mako"/>\
/*
 * ============================================================================
 * This file was generated by the GMV's Configurator Tool and is part of an I/O
 * partition configuration. 
 * File Purpose:	IO Partition user configuration. Contains the configuration 
 * 					options for Ethernet's GRETH devices.
 * ============================================================================
 */
#include <iop.h>
#include <iop_cpsw.h>
#include <eth_support.h>

${iop_template.RemotePortList(iop_configuration)}\

${iop_template.IopBuffersStorage(device.setup.txd_count + device.setup.rxd_count)}\

/**
 * @brief CPSW control structure
 */
static cpsw_device_t cpsw_driver = ${'\\'}
{
    .iop_buffers            = iop_buffers,
    .iop_buffers_storage    = iop_buffers_storage,
};

/**
 * @brief CPSW driver configuration
 */
static iop_eth_device_t device_configuration = ${'\\'}
{
    /* device configuration */
    .dev        = {

        .driver         = (void *)&cpsw_driver,
        .init           = cpsw_initialize,
        .open           = cpsw_open,
        .read           = cpsw_read,
        .write          = cpsw_write,
        .close          = cpsw_close,
    },

    /* ethernet configuration */
    .ip         = { ${', '.join(device.setup.ip)} },
    .mac        = { ${', '.join(['0x{0}'.format(o) for o in device.setup.mac])} },
    .rx_count   = ${device.setup.rxd_count},
    .tx_count   = ${device.setup.txd_count}
};

${iop_template.PhysicalDevice(iop_configuration, device, device_functions)}\
