<%
	# device functions
	device_functions = dict(
		reader_task='can_reader',
		write_task='can_write',
		
		header_prebuild='can_prebuild_header',
		header_compare='can_compare_header',
		header_copy='can_copy_header')
%>\
<%namespace name="iop_template" file="/iop_template.mako />\
 /*
 * ============================================================================
 * This file was generated by the GMV's Configurator Tool and is part of an I/O
 * partition configuration. 
 * File Purpose:	IO Partition user configuration. Contains the configuration 
 * 					options for OCCAN driver of CAN devices.
 * ============================================================================
 */
 
 #include <iop.h>
 #include <iop_occan.h>
 #include <can_support.h>
 
 ${iop_template.RemotePortList(iop_configuration)}
 
 ${iop_template.IopBuffersStorage(device.setup.txd_count + device.setup.rxd_count)}\
 
  /**
 * @brief TX descriptor to IOP buffer mapping
 */
static iop_buffer_t *tx_iop_buffer[${device.setup.txd_count}];
/**
 * @brief RX descriptor to IOP buffer mapping
 */
static iop_buffer_t *rx_iop_buffer[${device.setup.rxd_count}];

/**
 * @brief RX and TX descriptor table
 * @warning this should be 2048, but we need 3072 to ensure the 0x400 alignment
 */
static uint8_t descriptor_table[3072];

/**  @brief OCCAN control strucutre */
static iop_can_device_t device_configuration =${'\\'}
{
	/* device configuration */
	.dev 		= {
		.driver			= (void *)&occan_driver,
		.init			= occan_initialize,
		.open			= occan_open,
		.read			= occan_read,
		.write			= occan_write,
		.close			= occan_close,
	},
	.dev_name =${}
}