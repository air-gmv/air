<%
    # device functions
    device_functions = dict(
          reader_task='spw_reader',
          writer_task='spw_writer',

          header_prebuild='spw_prebuild_header',
          header_compare='spw_compare_header',
          header_copy='spw_copy_header')
%>\
<%namespace name="iop_template" file="/iop_templates.mako"/>\
/*
 * ============================================================================
 * This file was generated by the GMV's Configurator Tool and is part of an I/O
 * partition configuration. 
 * File Purpose:	IO Partition user configuration. Contains the configuration 
 * 					options for Ethernet's GRSPW devices.
 * ============================================================================
 */
#include <iop.h>
#include <IOPgrspw_router.h>
#include <spw_support.h>
#include <routing_table.h>

${iop_template.RemotePortList(iop_configuration)}\

/** @brief  GRSPW control structure*/
static router_priv spwrtr_driver = ${'\\'}
{
	/* Router tables */
	struct router_routes *routes = rtr_routes;
	struct router_ps *ps = rtr_ps;
	struct port_timer *timer_reload = ps_timer; 
};

/** @brief GRSPW driver configuration */
static iop_spw_router_device_t device_configuration = ${'\\'}
{
    /* device configuration */
    .dev        = {

        .driver         = (void *)&spwrtr_driver,
        .init           = router_initialize,
        .open           = router_open,
//        .read           = spw_read,
//        .write          = spw_write,
        .close          = router_close,
    },

    /* spacewire router configuration configuration */
	.flags		= ${device.setup.flags},
	.config		= ${device.setup.config},
	.iid		= ${device.setup.iid},
	.idiv		= ${device.setup.idiv}
};

${iop_template.PhysicalDevice(iop_configuration, device, device_functions)}\
