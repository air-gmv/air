<%	
	# device functions
	device_functions = dict(
		reader_task='can_reader',
		writer_task='can_writer',
		
		header_prebuild='NULL',
		header_compare='can_compare_header',
		header_copy='can_copy_header')
%>\
<%namespace name="iop_template" file="/iop_templates.mako"/>\
 /*
 * ============================================================================
 * This file was generated by the GMV's Configurator Tool and is part of an I/O
 * partition configuration. 
 * File Purpose:	IO Partition user configuration. Contains the configuration 
 * 					options for GRCAN driver of CAN devices to be used on the
 *					gr740 board.
 * ============================================================================
 */
 
 #include <iop.h>
 #include <grcan.h>
 #include <can_support.h>
 
 ${iop_template.RemotePortList(iop_configuration)}\

/**
 *@brief Allocation of the receiver memory
 */
static uint8_t rx_msg_fifo[${device.setup.rxd_count*16*4+1024}];
/**
 *@brief Allocation of the transmiter memory
 */
static uint8_t tx_msg_fifo[${device.setup.txd_count*16*4+1024}];

/** @brief GRCAN control structure*/
static grcan_priv grcan_driver = ${'\\'}
{
	/* Acceptance filter */
	.afilter		= {
		.code			= ${device.setup.code},
		.mask			= ${device.setup.mask},
	},
	/* Synchronization filter */
	.sfilter		= {
		.code			= 0xffffffff,
		.mask			= 0x00000000,
	},

	.txbuf_adr = 0,
	.rxbuf_adr = 0,
	
	.txcomplete = 0,
	.rxcomplete = 0,
	
	.txblock = 0,
	.rxblock = 0,
	
	.tx_sem = 0,
	.rx_sem = 0,
	.txempty_sem = 0,
	.dev_sem = 0,
	
	.txbuf_size = ${device.setup.txd_count*16*4},
	.rxbuf_size = ${device.setup.rxd_count*16*4},
	
	.config = {
		.selection = {
			.selection 	= ${device.setup.selection},
			.enable0 	= ${device.setup.enable0},
			.enable1 	= ${device.setup.enable1},
		},
	},
	
	._tx = tx_msg_fifo,
	._rx = rx_msg_fifo,
};

/**  @brief GRCAN control strucutre */
static iop_can_device_t device_configuration = ${'\\'}
{
	/* device configuration */
	.dev 		= {
		.driver			= (void *)&grcan_driver,
		.init			= iop_grcan_initialize,
		.open			= iop_grcan_open,
		.read			= iop_grcan_read,
		.write			= iop_grcan_write,
		.close			= iop_grcan_close,
	},
	.can_core 	= ${device.setup.can_core},
	.baud_rate 	= ${device.setup.baud},
};

${iop_template.PhysicalDevice(iop_configuration, device, device_functions)}\
