<%
    import air
    import utils.templates as makoutils
    import parsers.a653.definitions as a653_definitions

    ## convert nanoseconds to ticks
    def nsec_to_ticks(value):
        return int((value / a653_definitions.A653_TIMESCALE) * app_configuration.ticks_per_second)


    queuing_count = 0
    sampling_count = 0
%>\
<%namespace name="iop_template" file="/iop_templates.mako"/>\
/*
 * ============================================================================
 * This file was generated by the GMV's Configurator Tool and is part of an I/O
 * partition configuration. 
 * File Purpose:	IO Partition user configuration. Contains the routing 
 * 					configuration options of the IO Partition.
 * ============================================================================
 */

#include <iop.h>

${iop_template.LogicalDevicesList(iop_configuration)}\

% for i, port in enumerate(iop_configuration.ports):
%if getattr(port, 'max_nb_message', 0) > 0:
% if queuing_count == 0:
/**
 * @brief Queuing ports configurations
 */
static air_queuing_port_configuration_t queuing_ports[] = {
% endif
    {
        .max_message_size   = ${port.max_message_size},
        .max_nb_message     = ${port.max_nb_message},
        .port_direction     = AIR_${port.direction}_PORT,
        .port_discipline    = 0
    },
<%
    port.iop_queuing_port_idx = queuing_count
    queuing_count += 1
%>\
% endif
% endfor
% if queuing_count > 0:
};
% endif

% for i, port in enumerate(iop_configuration.ports):
% if getattr(port, 'max_nb_message', 0) == 0:
% if sampling_count == 0:
/**
 * @brief Sampling ports configurations
 */
static air_sampling_port_configuration_t sampling_ports[] = {
% endif
    {
        .max_message_size   = ${port.max_message_size},
        .refresh_period     = ${nsec_to_ticks(port.refresh_period)},
        .port_direction     = AIR_${port.direction}_PORT,
    },
<%
    port.iop_sampling_port_idx = sampling_count
    sampling_count += 1
%>\
% endif
% endfor
% if sampling_count > 0:
};
% endif

/**
 * @brief IOP remote ports
 */
iop_port_t remote_ports[${len(iop_configuration.ports)}] = {
% for i, port in enumerate(iop_configuration.ports):
    {
        .type               = ${'AIR_SAMPLING_PORT' \
                                if getattr(port, 'max_nb_message', 0) == 0 else \
                                'AIR_QUEUING_PORT'},
        .name               = "${port.name}",
        .configuration      = ${'&sampling_ports[{0}]'.format(port.iop_sampling_port_idx) \
                                if getattr(port, 'max_nb_message', 0) == 0 else \
                                '&queuing_ports[{0}]'.format(port.iop_queuing_port_idx)},
        .device             = ${'NULL' \
                                if port.logical_device is None else \
                                '&logical_device_{0}'.format(port.logical_device.id)}
    },
% endfor
};

