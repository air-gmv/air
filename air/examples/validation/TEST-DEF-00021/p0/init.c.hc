/*
 * ============================================================================
 * This file was generated by the GMV's Configurator Tool and is part of an
 * AIR - ARINC 653 Interface in RTEMS - application configuration.
 * File Purpose  : Partition Initialization
 * ============================================================================
 */

#include <air.h>
#include <rtems.h>
#include <imaspex.h>

#ifdef PMK_ARM_ZYNQZ1
#include <rtems/score/armv4.h>
#include <libcpu/arm-cp15.h>


/**
 * @brief Install the HM handler
 */
void hm_handler_install(void *handler){
    arm_cp15_set_exception_handler(ARM_EXCEPTION_DATA_ABORT, &_ARMV4_Exception_data_abort);
    _ARMV4_Exception_data_abort_set_handler(handler);
    arm_cp15_set_exception_handler(ARM_EXCEPTION_PREF_ABORT, &_ARMV4_Exception_prefetch_abort);
    _ARMV4_Exception_prefetch_abort_set_handler(handler);
    arm_cp15_set_exception_handler(ARM_EXCEPTION_UNDEF, &_ARMV4_Exception_prefetch_abort);
    _ARMV4_Exception_prefetch_abort_set_handler(handler);
}
#endif /* PMK_ARM_ZYNQZ1 */

/**
 * @brief Partition entry point
 */
extern int test_main() __attribute__ ((weak));

/**
 * @brief Partition health-monitor callback
 */
extern void partition_HM_callback(
        air_state_e state_id,
        air_error_e error_id) __attribute__ ((weak));
/**
 * @brief Health-Monitor ISR handler
 */
static void hm_isr_handler(void) {

    /* get HM event */
    air_hm_event_t hm_event;
    air_syscall_get_hm_event(&hm_event);

    /* call partition HM callback */
    if (partition_HM_callback != NULL) {
        partition_HM_callback(hm_event.state_id, hm_event.error_id);
    }
}

/**
 * @brief Main RTEMS task
 */
rtems_task Init(rtems_task_argument ignored) {

    /* register HM ISR handler */
    hm_handler_install(hm_isr_handler);

    /* initialize IMASPEX */
    //imaspex_init();

    /* call entry point */
    if (test_main != NULL) {
        test_main();
    }

    rtems_task_delete(RTEMS_SELF);
}

#include <rtems_config.h>






